// <auto-generated />
using System;
using CVOnline.Web.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CVOnline.Web.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250331102441_UpdateCVTemplatesDetailed")]
    partial class UpdateCVTemplatesDetailed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CVOnline.Web.Models.Domain.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CVOnline.Web.Models.Domain.CV", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.HasIndex("UserId");

                    b.ToTable("CVs");
                });

            modelBuilder.Entity("CVOnline.Web.Models.Domain.CVShare", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CVId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPasswordProtected")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShareToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CVId");

                    b.HasIndex("UserId");

                    b.ToTable("CVShares");
                });

            modelBuilder.Entity("CVOnline.Web.Models.Domain.CVTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CssTemplate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HtmlTemplate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreviewImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsageCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CVTemplates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Simple",
                            CssTemplate = ".simple-cv { font-family: Arial, sans-serif; color: #333; padding: 20px; } .simple-cv h1 { font-size: 28px; color: #000; } .simple-cv h2 { font-size: 20px; color: #555; margin-top: 15px; } .simple-cv hr { border: 1px solid #ccc; }",
                            HtmlTemplate = "<div class=\"simple-cv\"><h1>{FullName}</h1><p>{Email} | {PhoneNumber} | {Address}</p><hr><h2>Kinh Nghiệm Làm Việc</h2><p>Nhập kinh nghiệm của bạn tại đây...</p><h2>Học Vấn</h2><p>Nhập thông tin học vấn tại đây...</p></div>",
                            Name = "Simple",
                            PreviewImageUrl = "/images/templates/simple.jpg",
                            UsageCount = 0
                        },
                        new
                        {
                            Id = 2,
                            Category = "Office Worker",
                            CssTemplate = ".professional-cv { font-family: 'Times New Roman', serif; color: #1e3a8a; padding: 25px; } .professional-cv header { border-bottom: 2px solid #1e3a8a; margin-bottom: 20px; } .professional-cv h1 { font-size: 30px; } .professional-cv h2 { font-size: 22px; color: #1e3a8a; } .professional-cv ul { list-style-type: disc; margin-left: 20px; }",
                            HtmlTemplate = "<div class=\"professional-cv\"><header><h1>{FullName}</h1><p>{Email} | {PhoneNumber}</p></header><section><h2>Học Vấn</h2><p>Nhập thông tin học vấn...</p></section><section><h2>Kinh Nghiệm</h2><p>Nhập kinh nghiệm làm việc...</p></section><section><h2>Kỹ Năng</h2><ul><li>Kỹ năng 1</li><li>Kỹ năng 2</li></ul></section></div>",
                            Name = "Professional",
                            PreviewImageUrl = "/images/templates/professional.jpg",
                            UsageCount = 0
                        },
                        new
                        {
                            Id = 3,
                            Category = "Colorful",
                            CssTemplate = ".creative-cv { font-family: 'Helvetica', sans-serif; color: #2f4f4f; background: #f0f8ff; padding: 20px; border-radius: 10px; } .creative-cv h1 { font-size: 32px; color: #ff4500; } .creative-cv h2 { font-size: 20px; color: #4682b4; } .creative-cv ul { list-style-type: square; margin-left: 25px; }",
                            HtmlTemplate = "<div class=\"creative-cv\"><h1>{FullName}</h1><p>{Email} - {PhoneNumber} - {Address}</p><div class=\"skills\"><h2>Kỹ Năng</h2><ul><li>Kỹ năng 1</li><li>Kỹ năng 2</li></ul></div><div class=\"experience\"><h2>Kinh Nghiệm</h2><p>Nhập kinh nghiệm tại đây...</p></div></div>",
                            Name = "Creative",
                            PreviewImageUrl = "/images/templates/creative.jpg",
                            UsageCount = 0
                        },
                        new
                        {
                            Id = 4,
                            Category = "Timeline",
                            CssTemplate = ".timeline-cv { font-family: 'Verdana', sans-serif; color: #333; padding: 20px; } .timeline-cv h1 { font-size: 28px; color: #d2691e; } .timeline-cv h2 { font-size: 20px; } .timeline-cv .timeline { margin-top: 20px; } .timeline-cv .event { margin: 10px 0; } .timeline-cv .event span { display: inline-block; width: 100px; color: #ff8c00; font-weight: bold; }",
                            HtmlTemplate = "<div class=\"timeline-cv\"><h1>{FullName}</h1><p>{Email} | {PhoneNumber}</p><div class=\"timeline\"><h2>Hành Trình</h2><div class=\"event\"><span>20XX - 20XX</span><p>Nhập sự kiện tại đây...</p></div><div class=\"event\"><span>20XX - Hiện tại</span><p>Nhập sự kiện tại đây...</p></div></div></div>",
                            Name = "Timeline",
                            PreviewImageUrl = "/images/templates/timeline.jpg",
                            UsageCount = 0
                        },
                        new
                        {
                            Id = 5,
                            Category = "Experiencer",
                            CssTemplate = ".modern-cv { font-family: 'Arial', sans-serif; display: flex; color: #4b0082; } .modern-cv aside { width: 30%; background: #e6e6fa; padding: 20px; } .modern-cv main { width: 70%; padding: 20px; } .modern-cv h1 { font-size: 26px; } .modern-cv h2 { font-size: 20px; color: #483d8b; }",
                            HtmlTemplate = "<div class=\"modern-cv\"><aside><h1>{FullName}</h1><p>{Email}<br>{PhoneNumber}<br>{Address}</p></aside><main><h2>Kinh Nghiệm</h2><p>Nhập kinh nghiệm tại đây...</p><h2>Kỹ Năng</h2><p>Nhập kỹ năng tại đây...</p></main></div>",
                            Name = "Modern",
                            PreviewImageUrl = "/images/templates/modern.jpg",
                            UsageCount = 0
                        },
                        new
                        {
                            Id = 6,
                            Category = "No Photo",
                            CssTemplate = ".minimalist-cv { font-family: 'Georgia', serif; color: #666; padding: 20px; } .minimalist-cv h1 { font-size: 30px; color: #333; border-bottom: 1px solid #999; } .minimalist-cv h2 { font-size: 18px; margin-top: 15px; }",
                            HtmlTemplate = "<div class=\"minimalist-cv\"><h1>{FullName}</h1><p>{Email} | {PhoneNumber}</p><h2>Kinh Nghiệm</h2><p>Nhập kinh nghiệm tại đây...</p><h2>Học Vấn</h2><p>Nhập học vấn tại đây...</p></div>",
                            Name = "Minimalist",
                            PreviewImageUrl = "/images/templates/minimalist.jpg",
                            UsageCount = 0
                        },
                        new
                        {
                            Id = 7,
                            Category = "Toàn bộ",
                            CssTemplate = ".classic-cv { font-family: 'Garamond', serif; color: #8b4513; padding: 25px; } .classic-cv h1 { font-size: 32px; text-align: center; } .classic-cv h2 { font-size: 22px; margin-top: 20px; }",
                            HtmlTemplate = "<div class=\"classic-cv\"><h1>{FullName}</h1><p>{Email} | {PhoneNumber} | {Address}</p><h2>Học Vấn</h2><p>Nhập học vấn tại đây...</p><h2>Kinh Nghiệm</h2><p>Nhập kinh nghiệm tại đây...</p></div>",
                            Name = "Classic",
                            PreviewImageUrl = "/images/templates/classic.jpg",
                            UsageCount = 0
                        },
                        new
                        {
                            Id = 8,
                            Category = "Office Worker",
                            CssTemplate = ".corporate-cv { font-family: 'Calibri', sans-serif; color: #000080; padding: 20px; } .corporate-cv header { background: #f0f0f0; padding: 10px; } .corporate-cv h1 { font-size: 28px; } .corporate-cv h2 { font-size: 20px; color: #191970; }",
                            HtmlTemplate = "<div class=\"corporate-cv\"><header><h1>{FullName}</h1><p>{Email} | {PhoneNumber}</p></header><section><h2>Mục Tiêu Nghề Nghiệp</h2><p>Nhập mục tiêu tại đây...</p></section><section><h2>Kinh Nghiệm</h2><p>Nhập kinh nghiệm tại đây...</p></section></div>",
                            Name = "Corporate",
                            PreviewImageUrl = "/images/templates/corporate.jpg",
                            UsageCount = 0
                        },
                        new
                        {
                            Id = 9,
                            Category = "Fresher",
                            CssTemplate = ".academic-cv { font-family: 'Bookman Old Style', serif; color: #800000; padding: 20px; } .academic-cv h1 { font-size: 30px; } .academic-cv h2 { font-size: 20px; color: #8b0000; margin-top: 15px; }",
                            HtmlTemplate = "<div class=\"academic-cv\"><h1>{FullName}</h1><p>{Email} | {PhoneNumber} | {Address}</p><h2>Học Vấn</h2><p>Nhập học vấn tại đây...</p><h2>Ấn Phẩm</h2><p>Nhập ấn phẩm hoặc nghiên cứu tại đây...</p></div>",
                            Name = "Academic",
                            PreviewImageUrl = "/images/templates/academic.jpg",
                            UsageCount = 0
                        },
                        new
                        {
                            Id = 10,
                            Category = "Experiencer",
                            CssTemplate = ".technical-cv { font-family: 'Courier New', monospace; display: flex; color: #008080; } .technical-cv aside { width: 25%; background: #e0ffff; padding: 15px; } .technical-cv main { width: 75%; padding: 15px; } .technical-cv h1 { font-size: 26px; } .technical-cv h2 { font-size: 20px; color: #006d5b; } .technical-cv ul { list-style-type: circle; }",
                            HtmlTemplate = "<div class=\"technical-cv\"><aside><h1>{FullName}</h1><p>{Email}<br>{PhoneNumber}</p></aside><main><h2>Kỹ Năng Kỹ Thuật</h2><ul><li>Kỹ năng 1</li><li>Kỹ năng 2</li></ul><h2>Dự Án</h2><p>Nhập dự án tại đây...</p></main></div>",
                            Name = "Technical",
                            PreviewImageUrl = "/images/templates/technical.jpg",
                            UsageCount = 0
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CVOnline.Web.Models.Domain.CV", b =>
                {
                    b.HasOne("CVOnline.Web.Models.Domain.CVTemplate", "Template")
                        .WithMany("CVs")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CVOnline.Web.Models.Domain.ApplicationUser", "User")
                        .WithMany("CVs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CVOnline.Web.Models.Domain.CVShare", b =>
                {
                    b.HasOne("CVOnline.Web.Models.Domain.CV", "CV")
                        .WithMany()
                        .HasForeignKey("CVId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CVOnline.Web.Models.Domain.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CV");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CVOnline.Web.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CVOnline.Web.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CVOnline.Web.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CVOnline.Web.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CVOnline.Web.Models.Domain.ApplicationUser", b =>
                {
                    b.Navigation("CVs");
                });

            modelBuilder.Entity("CVOnline.Web.Models.Domain.CVTemplate", b =>
                {
                    b.Navigation("CVs");
                });
#pragma warning restore 612, 618
        }
    }
}
